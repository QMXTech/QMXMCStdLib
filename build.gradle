import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import groovy.json.JsonParserType

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

plugins {
    id 'maven'
    id 'com.jfrog.artifactory' version '4.9.8'
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

apply plugin: 'net.minecraftforge.gradle.forge'

def getGitRef() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch ( Throwable ignored ) {
        return "unknown"
    }
}

def getGitMessage() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'log', '-1', '--pretty=%B'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch ( Throwable ignored ) {
        return "unknown"
    }
}

group = "com.qmxtech.qmxmcstdlib" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "QMXMCStdLib"
ext.displayName = "QMX Minecraft Standard Library"

if( project.hasProperty( "buildNumber" ) ) {
    if( project.getProperty( "buildNumber" ) == "release" ) {
        ext.version = project.version
        ext.artifactoryPath = "minecraft-release"
        ext.buildType = "beta" // labelled "beta" for now, until actual releases
    }
    else {
        ext.version = project.version + "-" + buildNumber
        ext.artifactoryPath = "minecraft-snapshot"
        ext.buildType = "alpha"
    }
} else {
    ext.version = project.version + "-" + getGitRef()
    ext.artifactoryPath = "minecraft-snapshot"
    ext.buildType = "alpha"
}

ext.gitRef = getGitRef()
ext.gitMessage = getGitMessage()
version = "${ext.version}"

minecraft {
    version = project.mcversion + "-" + project.forgeversion
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = project.mcpversion
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    replace '@VERSION@', project.version
}

repositories {
    mavenCentral()
    maven {
        name = "OC repo"
        url = "http://maven.cil.li/"
    }
    maven {
        name = "ElytraDev"
        url = 'https://repo.elytradev.com/'
    }
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    deobfCompile "li.cil.oc:OpenComputers:MC1.12.2-1.7.+"
    deobfCompile 'com.elytradev:mirage:2.0.3-rc3-SNAPSHOT'
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task pomFile {
    doLast {
        pom {
            project {
                inceptionYear '2019'
                licenses {
                    license {
                        name 'GNU General Public License Version 3.0'
                        url 'http://www.gnu.org/licenses/gpl-3.0-standalone.html'
                        distribution 'repo'
                    }
                }
            }
        }.writeTo("build/pom.xml")
    }
}

artifacts {
    archives jar
    archives sourceJar
}

artifactory {
    if( project.hasProperty( "artifactoryUser" ) ) {
        contextUrl = 'https://artifactory.qmx-software.com/'
        publish {
            dependsOn pomFile
            repository {
                repoKey = project.ext.artifactoryPath
                username = project.getProperty( "artifactoryUser" )
                password = project.getProperty( "artifactoryPass" )
            }
            defaults {
                publishConfigs( 'archives' )

                publishArtifacts = true
                publishPom = true
            }
        }
    }
}

task gitlabPublish {
    dependsOn artifactoryPublish
    if( project.hasProperty( "gitlabToken" ) ) {
        def data = JsonOutput.toJson([
            name: "${project.ext.displayName} ${version}",
            tag_name: version,
            description: project.ext.gitMessage,
            ref: project.ext.gitRef,
            assets: [
                links: [
                    [
                        name: "${archivesBaseName}-${version}.jar",
                        url: "https://artifactory.qmx-software.com/minecraft-release/com/qmxtech/qmxmcstdlib/${archivesBaseName}/${version}/${archivesBaseName}-${version}.jar"
                    ]
                ]
            ]
        ])
        def request = new URL( "https://git.qmx-software.com/api/v4/projects/64/releases" ).openConnection()
        request.setRequestMethod( "POST" )
        request.setDoOutput( true )
        request.setRequestProperty( "Content-Type", "application/json" )
        request.setRequestProperty( "PRIVATE-TOKEN", project.gitlabToken )
        request.getOutputStream().write( data.getBytes() )
        def response = request.getResponseCode();
        if( response == 201 ) {
            println( "GitLab Publish: Success!" );
        } else {
            throw new GradleException( "GitLab Publish: Failure." )
        }
    }
}

task githubPublish {
    dependsOn gitlabPublish
    if( project.hasProperty( "githubToken" ) ) {
        def data = JsonOutput.toJson([
            name: "${project.ext.displayName} ${version}",
            tag_name: version,
            body: project.ext.gitMessage,
            target_commitish: "master"
        ])
        def req1 = new URL( "https://api.github.com/repos/QMXTech/${archivesBaseName}/releases" ).openConnection()
        req1.setRequestMethod( "POST" )
        req1.setDoOutput( true )
        req1.setRequestProperty( "Content-Type", "application/json" )
        req1.setRequestProperty( "Authorization", "token ${project.githubToken}" )
        req1.getOutputStream().write( data.getBytes() )
        def req1rc = req1.getResponseCode();
        if( req1rc == 201 ) {
            def req1res = new JsonSlurper().setType(JsonParserType.LAX).parseText( req1.getInputStream().getText() )
            def req2 = new URL( req1res.upload_url.minus( "{?name,label}" ) + "?name=${archivesBaseName}-${version}.jar" ).openConnection()
            req2.setRequestMethod( "POST" )
            req2.setDoOutput( true )
            req2.setRequestProperty( "Content-Type", "application/java-archive" )
            req2.setRequestProperty( "Authorization", "token ${project.githubToken}" )
            req2.getOutputStream().write( file( "build/libs/${archivesBaseName}-${version}.jar" ).getBytes() )
            def req2rc = req2.getResponseCode();
            if( req2rc == 201 ) {
                println( "GitHub Publish: Success!" )
            } else {
                throw new GradleException( "GitHub Publish: Failure." )
            }
        } else {
            throw new GradleException( "GitHub Publish: Failure." )
        }
    }
}

curseforge {
    if( project.hasProperty( "curseforgeApiKey" ) ) {
        apiKey = project.getProperty( "curseforgeApiKey" )
        project {
            id = "337056"
            releaseType = project.ext.buildType
            changelog = file("CHANGELOG")
            mainArtifact(jar) {
                displayName = "QMXMCStdLib $project.version"
                relations {
                    requiredDependency 'opencomputers'
                    //requiredDependency 'ender-io'
                    optionalDependency 'albedo'
                }
            }
        }
    }
}

task publish {
    dependsOn githubPublish
    dependsOn curseforge
}
